Linux Kernel Runtime Guard (LKRG)
=================================

LKRG performs runtime integrity checking of the Linux kernel and detection of
security vulnerability exploits against the kernel.

Being a kernel module (not a kernel patch), LKRG can be built for and loaded on
top of a wide range of mainline and distros' kernels, without needing to patch
those.  We currently support kernel versions ranging from as far back as
RHEL7's (and its many clones/revisions) and Ubuntu 16.04's to latest mainline
and distros' kernels.  For this release, we've tested LKRG with Linux kernels
up to and including 5.7.

Please refer to CONCEPTS for concepts behind LKRG and for information on its
efficacy, and to PERFORMANCE for information on its performance impact.

The following sections describe how to obtain LKRG sources, compile them, test
LKRG, install it on the system, and customize its configuration.


Getting the sources
-------------------

For LKRG releases and latest source code, please refer to its homepage:

	https://www.openwall.com/lkrg/

To download this release from there and verify it, you would have used commands
like the below:

	wget https://www.openwall.com/signatures/openwall-offline-signatures.asc
	gpg --import openwall-offline-signatures.asc
	wget https://www.openwall.com/lkrg/lkrg-0.8.tar.gz.sign
	wget https://www.openwall.com/lkrg/lkrg-0.8.tar.gz
	gpg --verify lkrg-0.8.tar.gz.sign lkrg-0.8.tar.gz

Please preserve the GnuPG key above and also use it to verify future releases,
which will most likely work in a similar manner.

Latest LKRG development source code is hosted on Bitbucket, from where you can
clone the git repository to a local directory using the following command:

	git clone https://bitbucket.org/Adam_pi3/lkrg-main.git


Build requirements
------------------

To compile LKRG, you will need the following software:

- GNU make

- A C compiler (ideally, the same that was used to compile the kernel itself)

- A kernel build directory corresponding to the Linux kernel image the module
  is to run on.  For example, under Debian and Ubuntu each linux-image package
  containing a kernel binary has a corresponding linux-headers package with the
  required build infrastructure, which you can install with:

	sudo apt-get install linux-headers-$(uname -r)

  Red Hat'ish (e.g. RHEL, CentOS, Fedora) distributions call this package
  kernel-devel, which you can install with:

	sudo yum install kernel-devel

(For documentation purposes, we prefix commands requiring root access with
"sudo", but you may of course run them as root by different means.)


Compiling
---------

With the above requirements satisfied, you should be able to easily compile
LKRG by running "make" when you're in LKRG's top level source code directory.
Compiling LKRG does not require root, and thus shouldn't be done as root.

To speed up the building, we recommend specifying a parallel job count matching
your machine's logical CPU count, e.g. like this:

	make -j8


Testing
-------

We recommend that before you install LKRG on the system such that it would be
started on bootup, you test loading of the LKRG module into the kernel manually
without making that setup permanent yet.  We also recommend that you keep
LKRG's detection of kernel integrity violations enabled for this test, yet
change its enforcement action from kernel panic (the default) to mere logging.
This way, you can safely detect potential system-specific false positives and
only proceed with installation if there are none.

You can do this for a freshly built LKRG (and while you're still in its top
level source code directory) with the following command:

	sudo insmod output/p_lkrg.ko kint_enforce=1

Then check kernel messages for any potential errors, use the system for a long
while, and check again:

	sudo dmesg

(Depending on kernel version and system configuration, the "dmesg" command
might not require root.)

Unload LKRG from the kernel with:

	sudo rmmod p_lkrg

so that it can then be loaded using the same procedure that's used on system
bootup and without the parameter override.


Installation
------------

If your Linux distribution uses systemd, you can install LKRG with:

	sudo make install

while you're still in its top level source code directory.

Run the following command to start the LKRG service just like it would be
started on next system bootup:

	sudo systemctl start lkrg

You can uninstall LKRG using "make" as well (still in the same directory):

	sudo make uninstall

In fact, you would need to do this before installing a new version of LKRG.

You can also use the following command to temporarily stop the LKRG service
without uninstalling it:

	sudo systemctl stop lkrg

We don't in any way favor systemd over other init systems, and would gladly add
support for those as well if there's demand or especially if we receive such
contributions.  Meanwhile, you can let "sudo make install" partially complete
(up to the point where it finds you're not using systemd) and then use:

	sudo modprobe p_lkrg

to load the module.  You can also put the "modprobe p_lkrg" command into a
system startup script.


Module parameters
-----------------

The LKRG kernel module supports a number of parameters, including kint_enforce
already mentioned above and many more.

For freshly built LKRG, you may list the parameters with:

	modinfo output/p_lkrg.ko

while you're still in LKRG's top level source code directory.

With LKRG installed on the system, you may list them with:

	sudo modinfo p_lkrg

(Depending on system configuration, "modinfo" might not require root.)

For descriptions of the parameters and their default and possible values,
please refer to the following section.


Runtime configuration
---------------------

Besides the parameters optionally specified when loading the module into the
kernel, LKRG also supports a number of sysctl's, which can be used to adjust
its behavior when it is already loaded into the kernel.  For each feature that
is configurable at both load time and run time, we have a module parameter and
a sysctl of the same name, so the below documentation is usable for both.

To list all LKRG sysctl's and their current values, use:

	sudo sysctl -a | grep lkrg

The sysctl's are:

 -> lkrg.heartbeat - print heartbeat message ("System is clean!" or "Tasks are
    clean!") whenever global integrity routine is executed - only two options
    are available:
        0 - do NOT print heartbeat message regardless of log_level value
        1 - if log_level value allows it, print heartbeat message
 -> lkrg.interval - change how often kernel timer is launched (kernel timer
    periodically executes global integrity routine). It can NOT be less than 5
    seconds to not harm the performance neither consume too much system
    resources. It can NOT be more than 1800 seconds (half an hour) to prevent
    from not validating the system for too long
 -> lkrg.trigger - force LKRG to execute global integrity routine right now. It
    is always visible as 0 number. Nevertheless, if you set it to 1, the
    global integrity routine is immediately fired and the value restored to 0.
 -> lkrg.log_level - change the log level. It can be a number between 0-4 or 0-6
    (on P_LKRG_DEBUG compilation). A strong debug provides very useful data to
    identify where could be a specific problem with LKRG (if it ever appears).
    Unfortunately, it produces tons of logs per execution and must be used only
    for debugging purpose, not as a normal run.
 -> lkrg.block_modules - block the kernel module loading functionality. Only two
    options are available:
        0 - do NOT block the kernel module loading functionality
        1 - block the kernel module loading functionality
 -> lkrg.hide - an optional feature available on P_LKRG_UNHIDE built. LKRG can
    (un)hide itself from the module list and KOBJs. However, it can be detected
    regardless:
        0 - unhide LKRG (if it is not already unhidden)
        1 - hide LKRG (if it is not already hidden)
 -> lkrg.msr_validate - enforce MSR validation whenever global integrity routine
    is executed. MSR validation can be enabled on x86/amd64 architectures.
    However, there might be a situation where it is not desired e.g. you are
    running LKRG on the host machine which manages VMs. In such case host
    machine might dynamically reconfigure some of the MSRs which LKRG validates.
    The following options are available:
        0 - do not validate MSR
        1 - enable MSR validation (default)
 -> lkrg.kint_validate - change LKRG's kernel/system integrity logic:
        0 - disabled
        1 - validation is performed only when manually triggered by lkrg.trigger
        2 - validation is performed periodically by the timer interrupt
            (controlled by lkrg.interval)
        3 - validation is performed periodically by the timer interrupt
            (controlled by lkrg.interval) and on random events
 -> lkrg.kint_enforce - change LKRG's logic when kernel/system integrity fails:
        0 - log once & accept corruption (snapshot new state)
        1 - log only (don't snapshot new state, can be noisy). For SELinux and
            CR0.WP (on x86) violation log & restore original values.
        2 - panic() - kill the kernel
 -> lkrg.pint_validate - change LKRG's task validation logic:
        0 - disabled
        1 - validate only currently running tasks
        2 - validate only currently running tasks + task which changes state to
            RUNNING
        3 - validate all tasks in the system (paranoid mode)
 -> lkrg.pint_enforce - change LKRG's logic when task validation fails:
        0 - log once & accept corruption (snapshot new state)
        1 - kill corrupted task
        2 - panic() - kill the kernel
 -> lkrg.pcfi_validate - change LKRG's poor's man CFI validation logic:
        0 - disabled
        1 - validate only stack page and stack pointer. Do not perform full
            stackwalk (weak pCFI)
        2 - fully enable pCFI
 -> lkrg.pcfi_enforce - change LKRG's logic when pCFI validation fails:
        0 - log only (don't snapshot new state, can be noisy)
        1 - kill corrupted task
        2 - panic() - kill the kernel
 -> lkrg.umh_validate - change usermodehelper (UMH) validation logic:
        0 - disable UMH validation
        1 - only previously allowed programs can be executed via UMH
        2 - completely block UMH
 -> lkrg.umh_enforce - change LKRG's logic when UMH validation fails:
        0 - log only (don't snapshot new state, can be noisy)
        1 - prevent execution (overwrite the original path)
        2 - panic() - kill the kernel
#if defined(CONFIG_X86)
 -> lkrg.smep_validate - change LKRG's SMEP validation logic:
        0 - disabled
        1 - enable
 -> lkrg.smep_enforce - change LKRG's logic when SMAP validation fails:
        0 - log once & accept corruption (snapshot new state)
        1 - log & restore original value
        2 - panic() - kill the kernel
-> lkrg.smap_validate - change LKRG's SMEP validation logic:
        0 - disabled
        1 - enable
 -> lkrg.smap_enforce - change LKRG's logic when SMAP validation fails:
        0 - log once & accept corruption (snapshot new state)
        1 - log & restore original value
        2 - panic() - kill the kernel
#endif

We do understand that we are providing a lot of knobs. To make configuration
easier and faster, we introduced 'profiles'. 'lkrg.profile_validate' controls
all '*_validate' knobs and 'lkrg.profile_enforce' controls all '*_enforce'.
By default 'lkrg.profile_validate' = 9 which means 'custom settings'. However,
it might take values between 0-4 (or 9).
By default 'lkrg.profile_enforce' = 9 which means 'custom settings'. However,
it might take values between 0-3 (or 9).

Profiles:

-> lkrg.profile_validate:

|============================================================================================|
|          0 (Disabled)           |        1 (Light)         |         2 (Balanced)          |
|=================================|==========================|===============================|
| -> kint_validate = 0 (Disabled) | 1 (Manual trigger only)  | 2 (Triggered by timer)        |
| -> pint_validate = 0 (Disabled) | 1 (Current task only)    | 2 (Current + waking up task)  |
| -> pcfi_validate = 0 (Disabled) | 1 (Weak pCFI)            | 1 (Weak pCFI)                 |
| ->  umh_validate = 0 (Disabled) | 1 (Allow specific paths) | 1 (Allow specific paths)      |
| ->  msr_validate = 0 (Disabled) | 0 (Disabled)             | 0 (Disabled)                  |
| -> smep_validate = 0 (Disabled) | 1 (Enabled)              | 1 (Enabled)                   |
| -> smap_validate = 0 (Disabled) | 1 (Enabled)              | 1 (Enabled)                   |
|============================================================================================|
|             3 (Moderate)                |                    4 (Heavy)                     |
|============================================================================================|
| 3 (Triggered by timer + random events)  | 3 (Triggered by timer + random events)           |
| 2 (Current + waking up task)            | 3 (Verify all tasks in the system by every hook) |
| 2 (Full pCFI)                           | 2 (Full pCFI)                                    |
| 1 (Allow specific paths)                | 2 (Full UMH lock-down)                           |
| 1 (Enabled)                             | 1 (Enabled)                                      |
| 1 (Enabled)                             | 1 (Enabled)                                      |
| 1 (Enabled)                             | 1 (Enabled)                                      |
|============================================================================================|

-> lkrg.profile_enforce:

|================================================================================|
|          0 (Log & Accept)          | 1 (Balanced)  | 2 (Moderate)  | 3 (Panic) |
|====================================|===============|===============|===========|
| -> kint_enforce = 0 (Log & accept) | 1 (Log only)  | 2 (Panic)     | 2 (Panic) |
| -> pint_enforce = 0 (Log & accept) | 1 (Kill task) | 1 (Kill task) | 2 (Panic) |
| -> pcfi_enforce = 0 (Log only)     | 1 (Kill task) | 1 (Kill task) | 2 (Panic) |
| ->  umh_enforce = 0 (Log only)     | 1 (Prev exec) | 1 (Prev exec) | 2 (Panic) |
| -> smep_enforce = 0 (Log & accept) | 2 (Panic)     | 2 (Panic)     | 2 (Panic) |
| -> smap_enforce = 0 (Log & accept) | 2 (Panic)     | 2 (Panic)     | 2 (Panic) |
|================================================================================|


That's all for now. Greetings from the LKRG team :)
